{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-proyectos\\\\weather-react-graphql\\\\src\\\\pages\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GET_WEATHER_QUERY } from \"../graphql/Queries\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Home() {\n  _s();\n\n  const [citySearched, setCitySearched] = useState(\"\");\n  const [getWeather, {\n    loading,\n    data,\n    error\n  }] = useLazyQuery(GET_WEATHER_QUERY, {\n    variables: {\n      name: \"Vancouver\"\n    }\n  }); // Error handling\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Error Found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 23\n  }, this);\n\n  if (data) {\n    console.log(data);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Search For Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"City name...\",\n      onChange: event => {\n        setCitySearched(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => getWeather(),\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather\",\n      children: data && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"City Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Temperature\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Wind\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"A/nOHonlKnQtQ19wWucWRD8k1Q0=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["D:/react-proyectos/weather-react-graphql/src/pages/Home.js"],"names":["React","useState","useLazyQuery","GET_WEATHER_QUERY","Home","citySearched","setCitySearched","getWeather","loading","data","error","variables","name","console","log","event","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,YAAR,QAA2B,gBAA3B;AACA,SAAQC,iBAAR,QAAgC,oBAAhC;;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AAEZ,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACM,UAAD,EAAa;AAACC,IAAAA,OAAD;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA;AAAhB,GAAb,IAAuCR,YAAY,CAACC,iBAAD,EAAoB;AACzEQ,IAAAA,SAAS,EAAE;AAACC,MAAAA,IAAI,EAAE;AAAP;AAD8D,GAApB,CAAzD,CAHY,CAOZ;;AACA,MAAIF,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACX,MAAID,IAAJ,EAAU;AACRI,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACD;;AACH,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,WAAW,EAAC,cAA/B;AACA,MAAA,QAAQ,EAAGM,KAAD,IAAW;AAACT,QAAAA,eAAe,CAACS,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AAAoC;AAD1D;AAAA;AAAA;AAAA;AAAA,YAFJ,eAII;AAAQ,MAAA,OAAO,EAAE,MAAMV,UAAU,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBACKE,IAAI,iBACH;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAFN;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GA/BQL,I;UAGwCF,Y;;;KAHxCE,I;AAiCT,eAAeA,IAAf","sourcesContent":["import React, {useState} from 'react';\r\nimport {useLazyQuery} from \"@apollo/client\";\r\nimport {GET_WEATHER_QUERY} from \"../graphql/Queries\"\r\n\r\nfunction Home() {\r\n\r\n    const [citySearched, setCitySearched] = useState(\"\");\r\n    const [getWeather, {loading, data, error}] = useLazyQuery(GET_WEATHER_QUERY, {\r\n        variables: {name: \"Vancouver\"},\r\n    });\r\n\r\n    // Error handling\r\n    if (error) return <h1>Error Found</h1>\r\n    if (data) {\r\n      console.log(data);\r\n    }\r\n  return (\r\n    <div className='home'>\r\n        <h1>Search For Weather</h1> \r\n        <input type=\"text\" placeholder=\"City name...\"\r\n        onChange={(event) => {setCitySearched(event.target.value)}} />\r\n        <button onClick={() => getWeather()}>Search</button>\r\n        <div className='weather'>\r\n            {data && (\r\n              <>\r\n                <h1>City Name</h1>\r\n                <h1>Temperature</h1>\r\n                <h1>Description</h1>\r\n                <h1>Wind</h1>\r\n              </>\r\n            )}\r\n            \r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home"]},"metadata":{},"sourceType":"module"}